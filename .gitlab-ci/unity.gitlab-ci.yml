stages:
  - prepare
  - build
  - deploy

# If you are looking for a place where to add 'UNITY_LICENSE_FILE' and other secrets, please visit your project's gitlab page:
# settings > CI/CD > Variables instead
variables:
  BUILD_NAME: projectT
  UNITY_ACTIVATION_FILE: ./unity3d.alf
  IMAGE: unityci/editor # https://hub.docker.com/r/unityci/editor
  IMAGE_VERSION: 1 # This will automatically use latest v1.x.x, see https://github.com/game-ci/docker/releases
  UNITY_VERSION: 2021.3.15f1 # Need to be change if u use different Unity version
  UNITY_DIR: $CI_PROJECT_DIR # this needs to be an absolute path. Defaults to the root of your tree.
  SCRIPT_DIR: $CI_PROJECT_DIR/.gitlab-ci/scripts
  # You can expose this in Unity via Application.version
  # VERSION_NUMBER_VAR: $CI_COMMIT_REF_SLUG-$CI_PIPELINE_ID-$CI_JOB_ID
  # VERSION_BUILD_VAR: $CI_PIPELINE_IID

image: $IMAGE:$UNITY_VERSION-base-$IMAGE_VERSION

######################################################## Check Unity Version ############################################################################
get-unity-version:
  image: alpine
  stage: prepare
  variables:
    GIT_DEPTH: 1
  script:
    - echo UNITY_VERSION=$(cat $UNITY_DIR/ProjectSettings/ProjectVersion.txt | grep "m_EditorVersion:.*" | awk '{ print $2}') | tee prepare.env
  artifacts:
    reports:
      dotenv: prepare.env

######################################################## Template ############################################################################
.unity_before_script: &unity_before_script
  before_script:
    - chmod +x $SCRIPT_DIR/before_script.sh && $SCRIPT_DIR/before_script.sh
  # needs:
  #   - job: get-unity-version
  #     artifacts: true

.cache: &cache
  cache:
    key: "$CI_PROJECT_NAMESPACE-$CI_PROJECT_NAME-$CI_COMMIT_REF_SLUG-$TEST_PLATFORM"
    paths:
      - $UNITY_DIR/Library/

.license: &license
  rules:
    - if: '$UNITY_LICENSE != null'
      when: always

.unity_defaults: &unity_defaults
  <<:
    - *unity_before_script
    - *cache
    - *license

########################################################## Get activation #####################################################################
# run this job when you need to request a license
# you may need to follow activation steps from documentation
get-activation-file:
  tags:
    - $LINUX_RUNNER_TAG
  <<: *unity_before_script
  rules:
    - if: '$UNITY_LICENSE == null'
      when: manual
  stage: prepare
  script:
    - chmod +x $SCRIPT_DIR/get_activation_file.sh && $SCRIPT_DIR/get_activation_file.sh
  artifacts:
    paths:
      - $UNITY_ACTIVATION_FILE
    expire_in: 10 min # Expiring this as artifacts may contain sensitive data and should not be kept public

########################################################## Build  #########################################################################

.build: &build
  stage: build
  <<: *unity_defaults
  script:
    - chmod +x $SCRIPT_DIR/build.sh && $SCRIPT_DIR/build.sh
  artifacts:
    paths:
      - $UNITY_DIR/Builds/
  # https://gitlab.com/gableroux/unity3d-gitlab-ci-example/-/issues/83
  # you may need to remove or replace these to fit your need if you are using your own runners
  tags:
    - $LINUX_RUNNER_TAG

build-android:
  <<: *build
  image: $IMAGE:$UNITY_VERSION-android-$IMAGE_VERSION
  variables:
    BUILD_TARGET: Android
    BUILD_APP_BUNDLE: "false"

build-android-il2cpp:
  <<: *build
  image: $IMAGE:$UNITY_VERSION-android-$IMAGE_VERSION
  variables:
    BUILD_TARGET: Android
    BUILD_APP_BUNDLE: "false"
    SCRIPTING_BACKEND: IL2CPP

########################################################## Release #########################################################################

release-package: 
  stage: dev
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  tags: 
    - $LINUX_RUNNER_TAG
  needs: ["build-android", "build-android-il2cpp"]
  rules:                               
    - if: $CI_COMMIT_BRANCH == "SRE-66"  # Run this job when commits are pushed or merged to the default branch
      when: manual
  script:
    - LATEST_TAG=$(curl -Ss --request GET --header "PRIVATE-TOKEN:$PERSONAL_ACCESS_TOKEN" "https://gitlab.com/api/v4/projects/${CI_PROJECT_ID}/repository/tags" | jq -r '.[0] | .name')
    - echo "running release_job for android, android-il2cpp respectively"
    # - echo "JOB-ID... $GEN_LINUX_JOB_ID, $GEN_MAC_JOB_ID, $EN_WINDOW_JOB_ID"
  release:                                         # See https://docs.gitlab.com/ee/ci/yaml/#release for available properties
    name: 'Release Executables v$LATEST_TAG'
    tag_name: '$LATEST_TAG.$CI_PIPELINE_IID'                # The version is incremented per pipeline.
    description: '$LATEST_TAG.$CI_PIPELINE_IID'
    assets:
      links:
        - name: 'Android Excutable'
          url: https://gitlab.com/inspirelab/gamelab/projectT/-/jobs/artifacts/$CI_COMMIT_BRANCH/download?job=build-android
        - name: 'Android IL2CPP Executable'
          url: https://gitlab.com/inspirelab/gamelab/projectT/-/jobs/artifacts/$CI_COMMIT_BRANCH/download?job=build-android-il2cpp




# deploy-android:
#  stage: deploy
#  image: ruby
#  script:
#    - cd $UNITY_DIR/Builds/Android
#    - echo $GPC_TOKEN > gpc_token.json
#    - gem install bundler
#    - bundle install
#    - fastlane supply --aab "${BUILD_NAME}.aab" --track internal --package_name com.youcompany.yourgame --json_key ./gpc_token.json
#  needs: ["build-android"]

# build-ios-xcode:
#   <<: *build
#   image: $IMAGE:$UNITY_VERSION-ios-$IMAGE_VERSION
#   variables:
#     BUILD_TARGET: iOS

#build-and-deploy-ios:
#  stage: deploy
#  script:
#    - cd $UNITY_DIR/Builds/iOS/$BUILD_NAME
#    - pod install
#    - fastlane ios beta
#  tags:
#    - ios
#    - mac
#  needs: ["build-ios-xcode"]


